// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ApiInstaGramTest
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("InstagramTestApi", Description="\tThis is an API test to get the\r\n\tCity name based on the Pincode  ", SourceFile="InstagramTestApi.feature", SourceLine=0)]
    public partial class InstagramTestApiFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "InstagramTestApi.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "InstagramTestApi", "\tThis is an API test to get the\r\n\tCity name based on the Pincode  ", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void CheckPostCodes(string cityName, string pinCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "SmokeTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check Post Codes", @__tags);
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("The API takes the city Name and returns the Pincode", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.When(string.Format("I have entered the {0}", cityName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.Then(string.Format("the respective {0} returned should be as expected", pinCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Check Post Codes, Post Code Test, Bangalore", new string[] {
                "SmokeTest",
                "Source:PostCodeCity.xlsx"}, SourceLine=0)]
        public virtual void CheckPostCodes_PostCodeTest_Bangalore()
        {
            this.CheckPostCodes("Bangalore", "560001", new string[] {
                        "Source:PostCodeCity.xlsx"});
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Check Post Codes, Post Code Test, Pune", new string[] {
                "SmokeTest",
                "Source:PostCodeCity.xlsx"}, SourceLine=0)]
        public virtual void CheckPostCodes_PostCodeTest_Pune()
        {
            this.CheckPostCodes("Pune", "411001", new string[] {
                        "Source:PostCodeCity.xlsx"});
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Check Post Codes, Post Code Test, Mysore", new string[] {
                "SmokeTest",
                "Source:PostCodeCity.xlsx"}, SourceLine=0)]
        public virtual void CheckPostCodes_PostCodeTest_Mysore()
        {
            this.CheckPostCodes("Mysore", "570001", new string[] {
                        "Source:PostCodeCity.xlsx"});
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Check Post Codes, Post Code Test, Chennai", new string[] {
                "SmokeTest",
                "Source:PostCodeCity.xlsx"}, SourceLine=0)]
        public virtual void CheckPostCodes_PostCodeTest_Chennai()
        {
            this.CheckPostCodes("Chennai", "600001", new string[] {
                        "Source:PostCodeCity.xlsx"});
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
